name: INDT-application-stack
services:
  insurance.indt.api:
    image: ${DOCKER_REGISTRY-}insuranceindtapi
    build:
      context: .
      dockerfile: Insurance.INDT.Api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      #- ASPNETCORE_HTTP_PORTS=8080
      - ASPNETCORE_URLS=http://+:80
      #- ASPNETCORE_HTTPS_PORTS=8081
      - ServiceBus:ServiceBusConnection=Endpoint=host.docker.internal;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=SAS_KEY_VALUE;UseDevelopmentEmulator=true;
      - ServiceBus:TopicName=topic.1
      - ServiceBus:SubscriptionName=subscription.1
      - MySqlDbcontext:ConnectionUrl=Server=dbMysql;Database=INDT;User ID=root;Password=admin;
      - DB_HOST=dbMysql 
      - "MongoDbSettings:ConnectionString=mongodb://admin:admin@mongoDb:27017"
      - "MongoDbSettings:Database=INDT"
      - "WebhookSettings:BaseUrl=https://webhook-test.com/"
      - "WebhookSettings:Url=c67881e3625d79a75e46708f79d2c7cc"
      - "AWS:Region=us-east-1"
      - "AWS:ServiceURL=http://localstack:4566"
      - "AWS:ForcePathStyle=true"
      - "AmazonS3Config:BucketName=indt-test-files"
      - "AmazonS3Config:BaaseUrlToGetFile=http://localhost:4566/"
      - "AWS_ACCESS_KEY_ID=test"
      - "AWS_SECRET_ACCESS_KEY=test"
      - "AWS_REGION=us-east-1"
      - "AzureBlobStorageConfig:ConnectionString=UseDevelopmentStorage=true"
      - "AzureBlobStorageConfig:ContainerName=indt-test-files"
      
    ports:
      - "8080:80"
    depends_on:
      - sb-emulator
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/home/app/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/home/app/.aspnet/https:ro
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:80/health"] # Command to execute for health check
        interval: 30s # How often to run the health check
        timeout: 10s # Maximum time allowed for the command to complete
        retries: 3 # Number of consecutive failures before considering the container unhealthy
        start_period: 5s # Initial grace period for the container to start up
  dbMysql:
    image: mysql:latest
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: admin # Replace with a strong password
      # MYSQL_DATABASE: your_database_name # Optional: a default database to create
      MYSQL_USER: admin # Optional: a user with superuser privileges
      # MYSQL_PASSWORD: admin # Optional: password for the user
    ports:
      - "3306:3306" # Maps host port 3306 to container port 3306
    volumes:
      - db_data:/var/lib/mysql # Persist data in a named volume
  sb-emulator:
    container_name: "sb-emulator"
    image: mcr.microsoft.com/azure-messaging/servicebus-emulator:latest
    pull_policy: always
    volumes:
      - "./ConfigFiles:/ServiceBus_Emulator/ConfigFiles"
    ports:
      - "5672:5672"
      - "5300:5300"
    environment:
      SQL_SERVER: sqledgeCompose
      MSSQL_SA_PASSWORD: "g0h0r5e8#@"  # Password should be same as what is set for SQL Edge  
      ACCEPT_EULA: 'Y'
      SQL_WAIT_INTERVAL: 15 # Optional: Time in seconds to wait for SQL to be ready (default is 15 seconds)
    depends_on:
      - sqledgeCompose
    networks:
      sb-emulator:
        aliases:
          - "sb-emulator"
  sqledgeCompose:
    container_name: "sqledge-compose"
    image: "mcr.microsoft.com/azure-sql-edge:latest"
    networks:
      sb-emulator:
        aliases:
          - "sqledgeCompose"
    environment:
        ACCEPT_EULA: 'Y'
        MSSQL_SA_PASSWORD: "g0h0r5e8#@" # To be filled by user as per policy : https://learn.microsoft.com/en-us/sql/relational-databases/security/strong-passwords?view=sql-server-linux-ver16 
  mongoDb:
    container_name: mongoDb
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    volumes:
      - mongo-data:/data/db
    restart: always

  insurance.indt.worker:
    image: ${DOCKER_REGISTRY-}insuranceindtworker
    environment:
      - ServiceBus:ServiceBusConnection=Endpoint=host.docker.internal;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=SAS_KEY_VALUE;UseDevelopmentEmulator=true;
      - ServiceBus:TopicName=topic.1
      - ServiceBus:SubscriptionName=subscription.1
      - "MongoDbSettings:ConnectionString=mongodb://admin:admin@mongoDb:27017"
      - "MongoDbSettings:Database=INDT"
      - "WebhookSettings:BaseUrl=https://webhook-test.com/"
      - "WebhookSettings:Url=c67881e3625d79a75e46708f79d2c7cc"
      - "AmazonSQSConfig:ServiceURL=http://localhost:4566"
      - "AmazonSQSConfig:AuthenticationRegion=us-east-1"
      - "AmazonSQSConfig:awsAccessKeyId=test"
      - "AmazonSQSConfig:awsSecretAccessKey=test"
    build:
      context: .
      dockerfile: Insurance.INDT.Worker/Dockerfile

  localstack:
    container_name: "${LOCALSTACK_DOCKER_NAME:-localstack-main}"
    image: localstack/localstack
    ports:
      - "127.0.0.1:4566:4566"            # LocalStack Gateway
      - "127.0.0.1:4510-4559:4510-4559"  # external services port range
    environment:
      # LocalStack configuration: https://docs.localstack.cloud/references/configuration/
      - DEBUG=${DEBUG:-0}
    volumes:
      - "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"

networks:
  sb-emulator:

volumes:
  db_data:
  mongo-data:   
